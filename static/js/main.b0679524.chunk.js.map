{"version":3,"sources":["components/PageHeader/index.jsx","components/JobItem/index.jsx","components/JobList/index.jsx","components/JobDetail/index.jsx","components/PageContent/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PageHeader","JobItem","job","daysAgo","DateDiff","Date","publishedAt","days","description","removeMarkdown","trimCharacters","className","to","id","title","JobList","state","loadedJobs","hasMoreJobs","index","prevProps","jobs","length","this","props","setState","slice","element","loadMore","loadJobs","bind","hasMore","map","key","React","Component","useParams","i","source","PageContent","fetch","cache","method","then","response","ok","Error","statusText","json","md5","url","basename","exact","path","render","children","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0679524.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function PageHeader() {\n  return (\n    <header>\n      <h1>Vagas de Programação</h1>\n    </header>\n  );\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport DateDiff from 'date-diff';\nimport trimCharacters from 'trim-characters';\nimport removeMarkdown from 'remove-markdown';\n\nimport './styles.css';\n\nexport default function JobItem({job}) {\n  const daysAgo = (new DateDiff(new Date(), new Date(job.publishedAt))).days();\n  const description = removeMarkdown(\n    trimCharacters(job.description, 150, false, ' ...')\n  );\n\n  return (\n    <li className=\"list-group-item\">\n      <Link className=\"list-group-item-action\" to={`/job/${job.id}`}>\n        <div className=\"d-flex w-100 justify-content-between\">\n          <strong className=\"mb-1\">{job.title}</strong>\n          <small>\n            {daysAgo}\n            {daysAgo > 1 ? ' dias ' : ' dia '}\n            atrás\n          </small>\n        </div>\n        <p className=\"mb-1\">\n          {description}\n        </p>\n      </Link>\n    </li>\n  );\n}\n","import React from 'react';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport JobItem from '../JobItem';\n\nclass JobList extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loadedJobs: [],\n      hasMoreJobs: true\n    };\n    this.index = 0;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.jobs.length !== this.props.jobs.length) {\n      this.setState({hasMoreJobs: true});\n    }\n  }\n\n  loadJobs() {\n    const jobs = this.props.jobs;\n    const loadedJobs = jobs.slice(0, this.index * 10);\n    this.index++;\n    this.setState({\n      loadedJobs,\n      hasMoreJobs: ((this.index * 10) < jobs.length)\n    });\n  }\n\n  render() {\n    const {loadedJobs, hasMoreJobs} = this.state;\n    return (\n      <InfiniteScroll\n        element=\"ul\"\n        className=\"list-group\"\n        loadMore={this.loadJobs.bind(this)}\n        hasMore={hasMoreJobs}\n      >\n        {loadedJobs.map(\n          (job) => <JobItem key={job.id} job={job} />\n        )}\n      </InfiniteScroll>\n    );\n  }\n}\n\nexport default JobList;\n","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\nimport DateDiff from 'date-diff';\n\nexport default function JobItem({jobs}) {\n  const {id} = useParams();\n  let job = null;\n  for (let i = 0, length = jobs.length; i < length; i++) {\n    if (jobs[i].id === id) {\n      job = jobs[i];\n      break;\n    }\n  }\n\n  const daysAgo = (new DateDiff(new Date(), new Date(job.publishedAt))).days();\n\n  return (\n    <article>\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h2 className=\"mb-1\">{ job.title }</h2>\n        <small>\n          {daysAgo}\n          {daysAgo > 1 ? ' dias ' : ' dia '}\n          atrás\n        </small>\n      </div>\n      <section>\n        <ReactMarkdown source={job.description} />\n      </section>\n    </article>\n  );\n}\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport md5 from 'md5';\n\nimport JobList from '../JobList';\nimport JobDetail from '../JobDetail';\n\nconst API_URL = 'https://carlsonsantana.github.io/fakeapi-jobs/data.json';\n\nclass PageContent extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      jobs: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      API_URL,\n      {\n        cache: 'no-store',\n        method: 'GET'\n      }\n    ).then((response) => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then((jobs) => jobs.map((job) => {\n      job.id = md5(`${job.url}:${job.publishedAt}`);\n      return job;\n    })).then((jobs) => this.setState({jobs}));\n  }\n\n  render() {\n    const {jobs} = this.state;\n    return (\n      <main>\n        <Router basename=\"/vagas-programacao/\">\n          <Switch>\n            <Route exact path=\"/\" render={() => <JobList jobs={jobs} />} />\n            <Route\n              exact\n              path=\"/job/:id\"\n              children={<JobDetail jobs={jobs} />}\n            />\n          </Switch>\n        </Router>\n      </main>\n    );\n  }\n}\n\nexport default PageContent;\n","import React from 'react';\n\nimport PageHeader from './components/PageHeader';\nimport PageContent from './components/PageContent';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <PageHeader />\n      <PageContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(\n      (registration) => {\n        registration.unregister();\n      }\n    ).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}