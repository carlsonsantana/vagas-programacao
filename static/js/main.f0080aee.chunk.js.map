{"version":3,"sources":["components/PageHeader/index.jsx","components/TimeAgo/index.jsx","components/JobItem/index.jsx","components/SearchForm/index.jsx","components/JobList/index.jsx","components/JobDetails/index.jsx","components/PageContent/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PageHeader","TimeAgo","date","diff","DateDiff","Date","daysAgo","Math","round","days","hoursAgo","hours","minutesAgo","ceil","minutes","showDays","showHours","JobItem","job","description","removeMarkdown","trimCharacters","className","to","id","title","publishedAt","SearchForm","today","thirtyDaysAgo","getTime","state","startDate","endDate","event","this","changeState","target","value","newState","setState","filterJobs","bind","props","filterHandler","htmlFor","type","onChange","titleHandleChange","descriptionHandleChange","selected","startDateHandleChange","endDateHandleChange","React","Component","JobList","loadedJobs","hasMoreJobs","index","prevProps","jobs","length","slice","element","loadMore","loadJobs","hasMore","map","key","JobDetails","useParams","color","i","href","url","rel","icon","faGithub","source","plugins","remarkBreaks","PageContent","allJobs","fetch","cache","method","then","response","ok","Error","statusText","json","md5","stripHtmlComments","filters","titleRegex","RegExp","descriptionRegex","filter","test","basename","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0080aee.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function PageHeader() {\n  return (\n    <header>\n      <h1>Vagas de Programação</h1>\n    </header>\n  );\n}\n","import React from 'react';\n\nimport DateDiff from 'date-diff';\n\nexport default function TimeAgo({date}) {\n  const diff = new DateDiff(new Date(), new Date(date));\n  const daysAgo = Math.round(diff.days());\n  const hoursAgo = Math.round(diff.hours());\n  const minutesAgo = Math.ceil(diff.minutes());\n  const showDays = daysAgo >= 1;\n  const showHours = !showDays && (hoursAgo >= 1);\n\n  return (\n    <small>\n      {\n        showDays ? (daysAgo > 1 ? `${daysAgo} dias ` : '1 dia ') : (\n          showHours ? (hoursAgo > 1 ? `${hoursAgo} horas ` : '1 hora ') : (\n            minutesAgo > 1 ? `${minutesAgo} minutos ` : '1 minuto '\n          )\n        )\n      }\n      atrás\n    </small>\n  );\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport trimCharacters from 'trim-characters';\nimport removeMarkdown from 'remove-markdown';\n\nimport './style.css';\nimport TimeAgo from '../TimeAgo';\n\nexport default function JobItem({job}) {\n  const description = removeMarkdown(\n    trimCharacters(job.description, 150, false, ' ...')\n  );\n\n  return (\n    <li className=\"list-group-item job-item\">\n      <Link className=\"list-group-item-action\" to={`/job/${job.id}`}>\n        <div className=\"d-flex w-100 justify-content-between\">\n          <strong className=\"mb-1\">{job.title}</strong>\n          <TimeAgo date={job.publishedAt} />\n        </div>\n        <p className=\"mb-1\">\n          {description}\n        </p>\n      </Link>\n    </li>\n  );\n}\n","import React from 'react';\n\nimport DatePicker from 'react-datepicker';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './style.css';\n\nclass SearchForm extends React.Component {\n  constructor() {\n    super();\n\n    const thirtyDaysInMilliseconds = 2592000000;\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getTime() - thirtyDaysInMilliseconds);\n\n    this.state = {\n      title: '',\n      description: '',\n      startDate: thirtyDaysAgo,\n      endDate: today\n    };\n  }\n\n  titleHandleChange(event) {\n    this.changeState({title: event.target.value});\n  }\n\n  descriptionHandleChange(event) {\n    this.changeState({description: event.target.value});\n  }\n\n  startDateHandleChange(startDate) {\n    this.changeState({startDate});\n  }\n\n  endDateHandleChange(endDate) {\n    this.changeState({endDate});\n  }\n\n  changeState(newState) {\n    this.setState(newState, this.filterJobs.bind(this));\n  }\n\n  filterJobs() {\n    this.props.filterHandler(this.state);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Filtros de pesquisa de vagas</h2>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"job-title\">Título</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"job-title\"\n              onChange={this.titleHandleChange.bind(this)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"job-description\">Descrição</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"job-description\"\n              onChange={this.descriptionHandleChange.bind(this)}\n            />\n          </div>\n          <fieldset>\n            <legend>Vagas publicadas entre</legend>\n            <div className=\"form-group\">\n              <label htmlFor=\"job-start-date\">A partir da data</label>\n              <DatePicker\n                id=\"job-start-date\"\n                className=\"form-control\"\n                selected={this.state.startDate}\n                onChange={this.startDateHandleChange.bind(this)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"job-end-date\">Até a data</label>\n              <DatePicker\n                id=\"job-end-date\"\n                className=\"form-control\"\n                selected={this.state.endDate}\n                onChange={this.endDateHandleChange.bind(this)}\n              />\n            </div>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from 'react';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport JobItem from '../JobItem';\nimport SearchForm from '../SearchForm';\n\nclass JobList extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loadedJobs: [],\n      hasMoreJobs: true\n    };\n    this.index = 0;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.jobs.length !== this.props.jobs.length) {\n      this.setState({hasMoreJobs: true});\n    }\n  }\n\n  loadJobs() {\n    const jobs = this.props.jobs;\n    const loadedJobs = jobs.slice(0, this.index * 10);\n    this.index++;\n    this.setState({\n      loadedJobs,\n      hasMoreJobs: ((this.index * 10) < jobs.length)\n    });\n  }\n\n  render() {\n    const {loadedJobs, hasMoreJobs} = this.state;\n    return (\n      <div>\n        <SearchForm filterHandler={this.props.filterHandler} />\n        <InfiniteScroll\n          element=\"ul\"\n          className=\"list-group\"\n          loadMore={this.loadJobs.bind(this)}\n          hasMore={hasMoreJobs}\n        >\n          {loadedJobs.map(\n            (job) => <JobItem key={job.id} job={job} />\n          )}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nexport default JobList;\n","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport ReactLoading from 'react-loading';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport remarkBreaks from 'remark-breaks';\n\nimport TimeAgo from '../TimeAgo';\nimport './style.css';\n\nexport default function JobDetails({jobs}) {\n  const {id} = useParams();\n\n  if ((jobs === null) || (jobs.length === 0)) {\n    return (\n      <ReactLoading type=\"spokes\" color=\"#000\" />\n    );\n  }\n\n  let job = null;\n  for (let i = 0, length = jobs.length; i < length; i++) {\n    if (jobs[i].id === id) {\n      job = jobs[i];\n      break;\n    }\n  }\n\n  return (\n    <article className=\"job-details\">\n      <header className=\"d-flex w-100 justify-content-between\">\n        <h2 className=\"mb-1\">{job.title}</h2>\n        <TimeAgo date={job.publishedAt} />\n      </header>\n      <section>\n        <section>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              Página onde a vaga foi publicada:{' '}\n              <a\n                href={job.url}\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                {job.url}\n              </a>{' '}\n              <a\n                href={job.url}\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n                className=\"text-body\"\n              >\n                <FontAwesomeIcon icon={faGithub} />\n              </a>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <ReactMarkdown source={job.description} plugins={[remarkBreaks]} />\n        </section>\n      </section>\n    </article>\n  );\n}\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport md5 from 'md5';\nimport stripHtmlComments from 'strip-html-comments';\n\nimport JobList from '../JobList';\nimport JobDetails from '../JobDetails';\n\nconst API_URL = 'https://carlsonsantana.github.io/static-jobs-api/data.json';\nconst A_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n\nclass PageContent extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      jobs: [],\n      allJobs: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      API_URL,\n      {\n        cache: 'no-store',\n        method: 'GET'\n      }\n    ).then((response) => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then((jobs) => jobs.map((job) => {\n      job.id = md5(`${job.url}:${job.publishedAt}`);\n      return job;\n    })).then((jobs) => jobs.map((job) => {\n      job.description = stripHtmlComments(job.description);\n      return job;\n    })).then((jobs) => this.setState({allJobs: jobs, jobs}));\n  }\n\n  filterHandler(filters) {\n    const titleRegex = new RegExp(filters.title, 'gi');\n    const descriptionRegex = new RegExp(filters.description, 'gi');\n    const endDate = new Date(filters.endDate.getTime() + A_DAY_IN_MILLISECONDS);\n    const jobs = this.state.allJobs.filter((job) => {\n      const publishedAt = new Date(job.publishedAt);\n      return (\n        titleRegex.test(job.title)\n        && descriptionRegex.test(job.description)\n        && (publishedAt.getTime() >= filters.startDate.getTime())\n        && (publishedAt.getTime() < endDate.getTime())\n      );\n    });\n    this.setState({jobs});\n  }\n\n  render() {\n    const {jobs} = this.state;\n    return (\n      <main>\n        <Router basename=\"/vagas-programacao/\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => (\n                <JobList\n                  jobs={jobs}\n                  filterHandler={this.filterHandler.bind(this)}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/job/:id\"\n              render={() => <JobDetails jobs={jobs} />}\n            />\n          </Switch>\n        </Router>\n      </main>\n    );\n  }\n}\n\nexport default PageContent;\n","import React from 'react';\n\nimport PageHeader from './components/PageHeader';\nimport PageContent from './components/PageContent';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <PageHeader />\n      <PageContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(\n      (registration) => {\n        registration.unregister();\n      }\n    ).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}